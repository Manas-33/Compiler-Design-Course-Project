
PARSING COMPLETE




								 PHASE 1: LEXICAL ANALYSIS 


SYMBOL   DATATYPE   TYPE   LINE NUMBER 
_______________________________________

#include <stdio.h>		Header	0	
#include <string.h>		Header	1	
main	int	Function	3	
a	int	Variable	5	
x	int	Variable	6	
1	CONST	Constant	6	
y	int	Variable	7	
2	CONST	Constant	7	
z	int	Variable	8	
3	CONST	Constant	8	
10	CONST	Constant	10	
5	CONST	Constant	11	
if	N/A	Keyword		12	
for	N/A	Keyword		14	
k	int	Variable	14	
0	CONST	Constant	14	
printf	N/A	Keyword		17	
else	N/A	Keyword		20	
idx	int	Variable	22	
i	int	Variable	24	
scanf	N/A	Keyword		27	
j	int	Variable	32	
return	N/A	Keyword		37	


								 PHASE 2: SYNTAX ANALYSIS 



Inorder traversal of the Parse Tree is: 

#include <stdio.h>, headers, #include <string.h>, program, a, declaration, NULL, statements, x, declaration, 1, statements, y, declaration, 2, statements, z, declaration, 3, statements, x, =, 3, statements, y, =, 10, statements, z, =, 5, statements, x, >, 5, if, k, declaration, 0, CONDITION, k, <, 10, CONDITION, k, ITERATOR, ++, for, y, =, x, +, 3, statements, printf, if-else, else, idx, declaration, 1, statements, i, declaration, 0, CONDITION, i, <, 10, CONDITION, i, ITERATOR, ++, for, printf, statements, scanf, statements, x, >, 5, if, printf, if-else, statements, j, declaration, 0, CONDITION, j, <, z, CONDITION, j, ITERATOR, ++, for, a, =, 1, main, return, RETURN, 1, 



								 PHASE 3: SEMANTIC ANALYSIS 

Semantic analysis completed with no errors

							   PHASE 4: INTERMEDIATE CODE GENERATION 

a = NULL
x = 1
y = 2
z = 3
x = 3
y = 10
z = 5
if (x > 5) GOTO L0 else GOTO L1

LABEL L0:
k = 0
LABEL L2:
if NOT (k < 10) GOTO L3
t1 = x + 3
y = t1
t1 = k + 1
k = t0
LABEL L2:
JUMP to L3

LABEL L1:
idx = 1
GOTO next
i = 0
LABEL L4:
if NOT (i < 10) GOTO L5
if (x > 5) GOTO L6 else GOTO L7

LABEL L6:

LABEL L7:
GOTO next
j = 0
LABEL L8:
if NOT (j < z) GOTO L9
a = 1
t4 = j + 1
j = t3
LABEL L8:
JUMP to L9
t4 = j + 1
j = t3
LABEL L4:
JUMP to L5


